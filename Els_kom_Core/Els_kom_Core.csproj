<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <Import Project="$(SolutionDir)\Core.props" Condition="Exists('$(SolutionDir)\Core.props')" />
  <PropertyGroup>
    <ProjectGuid>{8588AE1C-CD41-4A96-8C9A-CD48B311BB6E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <RootNamespace>Els_kom_Core</RootNamespace>
    <AssemblyName>Els_kom.Core</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <MyType>Windows</MyType>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <TargetFrameworkProfile />
    <NoWin32Manifest>False</NoWin32Manifest>
    <SignAssembly>True</SignAssembly>
    <DelaySign>false</DelaySign>
    <AssemblyOriginatorKeyMode>File</AssemblyOriginatorKeyMode>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
    <IntermediateOutputPath>..\obj\$(Platform)\$(Configuration)\$(ProjectName)</IntermediateOutputPath>
    <WarningLevel>4</WarningLevel>
    <NoStdLib>False</NoStdLib>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x86'">
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <DefineConstants>ELS_KOM_CORE_BUILD</DefineConstants>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Collections.Generic" />
    <Import Include="System.Data" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Linq" />
    <Import Include="System.Xml.Linq" />
    <Import Include="System.Threading.Tasks" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Classes\BlowFish.cs" />
    <Compile Include="Classes\EntryVer.cs" />
    <Compile Include="Classes\ExecutionManager.cs" />
    <Compile Include="Classes\GenericPluginLoader.cs" />
    <Compile Include="Classes\Git.cs" />
    <Compile Include="Classes\Icons.cs" />
    <Compile Include="Classes\KOMManager.cs" />
    <Compile Include="Classes\KOMStream.cs" />
    <Compile Include="Classes\LoadResources.cs" />
    <Compile Include="Classes\MessageManager.cs" />
    <Compile Include="Classes\MiniDump.cs" />
    <Compile Include="Classes\PackingError.cs" />
    <Compile Include="Classes\ResourcesDir.cs" />
    <Compile Include="Classes\SafeNativeMethods.cs" />
    <Compile Include="Classes\SettingsFile.cs" />
    <Compile Include="Classes\ShowTaskbarEvent.cs" />
    <Compile Include="Classes\UnpackingError.cs" />
    <Compile Include="Classes\Version.cs" />
    <Compile Include="Classes\XMLObject.cs" />
    <Compile Include="Classes\ZlibHelper.cs" />
    <Compile Include="..\externals\ZLIB.NET\Adler32.cs">
      <Link>Classes\Zlib\Adler32.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\Deflate.cs">
      <Link>Classes\Zlib\Deflate.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\InfBlocks.cs">
      <Link>Classes\Zlib\InfBlocks.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\InfCodes.cs">
      <Link>Classes\Zlib\InfCodes.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\Inflate.cs">
      <Link>Classes\Zlib\Inflate.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\InfTree.cs">
      <Link>Classes\Zlib\InfTree.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\StaticTree.cs">
      <Link>Classes\Zlib\StaticTree.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\SupportClass.cs">
      <Link>Classes\Zlib\SupportClass.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\Tree.cs">
      <Link>Classes\Zlib\Tree.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\ZInputStream.cs">
      <Link>Classes\Zlib\ZInputStream.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\Zlib.cs">
      <Link>Classes\Zlib\Zlib.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\ZOutputStream.cs">
      <Link>Classes\Zlib\ZOutputStream.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\ZStream.cs">
      <Link>Classes\Zlib\ZStream.cs</Link>
    </Compile>
    <Compile Include="..\externals\ZLIB.NET\ZStreamException.cs">
      <Link>Classes\Zlib\ZStreamException.cs</Link>
    </Compile>
    <Compile Include="Controls\AboutControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Controls\AboutControl.Designer.cs">
      <DependentUpon>AboutControl.cs</DependentUpon>
    </Compile>
    <Compile Include="Controls\MainControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Controls\MainControl.Designer.cs">
      <DependentUpon>MainControl.cs</DependentUpon>
    </Compile>
    <Compile Include="Controls\SettingsControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Controls\SettingsControl.Designer.cs">
      <DependentUpon>SettingsControl.cs</DependentUpon>
    </Compile>
    <Compile Include="Enums\LoadImagefuLoad.cs" />
    <Compile Include="Enums\LoadImageTypes.cs" />
    <Compile Include="Enums\SYSCOMMANDS.cs" />
    <Compile Include="Enums\MINIDUMP_TYPE.cs" />
    <Compile Include="interfaces\ICallbackPlugin.cs" />
    <Compile Include="interfaces\IEncryptionPlugin.cs" />
    <Compile Include="interfaces\IKomPlugin.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <UsingTask TaskName="gitbuildinfo" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFile1 Required="true" />
      <TargetNamespace Required="true" />
      <SolutionDir Required="true" />
      <OutputFile2 Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        Log.LogMessage("Getting build info from git");
        string git_out1;
        System.Diagnostics.Process pro1 = new System.Diagnostics.Process();
        pro1.StartInfo.FileName = "git";
        pro1.StartInfo.Arguments = "describe --all --always --dirty";
        pro1.StartInfo.RedirectStandardOutput = true;
        pro1.StartInfo.UseShellExecute = false;
        pro1.StartInfo.CreateNoWindow = true;
        try
        {
          pro1.Start();
          git_out1 = pro1.StandardOutput.ReadToEnd();
          pro1.WaitForExit();
        }
        catch (System.ComponentModel.Win32Exception)
        {
          git_out1 = "Not a git clone or git is not in Path.";
        }
        pro1.Dispose();
        git_out1 = git_out1.Remove(git_out1.Length - 1, 1);
        string git_out2;
        System.Diagnostics.Process pro2 = new System.Diagnostics.Process();
        pro2.StartInfo.FileName = "git";
        pro2.StartInfo.Arguments = "rev-parse --short HEAD";
        pro2.StartInfo.RedirectStandardOutput = true;
        pro2.StartInfo.UseShellExecute = false;
        pro2.StartInfo.CreateNoWindow = true;
        try
        {
          pro2.Start();
          git_out2 = pro2.StandardOutput.ReadToEnd();
          pro2.WaitForExit();
        }
        catch (System.ComponentModel.Win32Exception)
        {
          git_out2 = "Not a git clone or git is not in Path.";
        }
        pro2.Dispose();
        git_out2 = git_out2.Remove(git_out2.Length - 1, 1);
        string git_out3;
        System.Diagnostics.Process pro3 = new System.Diagnostics.Process();
        pro3.StartInfo.FileName = "git";
        pro3.StartInfo.Arguments = "name-rev --name-only HEAD";
        pro3.StartInfo.RedirectStandardOutput = true;
        pro3.StartInfo.UseShellExecute = false;
        pro3.StartInfo.CreateNoWindow = true;
        try
        {
          pro3.Start();
          git_out3 = pro3.StandardOutput.ReadToEnd();
          pro3.WaitForExit();
        }
        catch (System.ComponentModel.Win32Exception)
        {
          git_out3 = "Not a git clone or git is not in Path.";
        }
        pro3.Dispose();
        git_out3 = git_out3.Remove(git_out3.Length - 1, 1);
        string outputData = "// Copyright (c) 2014-2018, Els_kom org." + System.Environment.NewLine;
        outputData += "// https://github.com/Elskom/" + System.Environment.NewLine;
        outputData += "// All rights reserved." + System.Environment.NewLine;
        outputData += "// license: MIT, see LICENSE for more details." + System.Environment.NewLine;
        outputData += System.Environment.NewLine;
        outputData += "/* DO NOT MODIFY THIS FILE IT IS AUTOGENERATED BY THE GITBUILDINFO BUILD TASK!!! */" + System.Environment.NewLine;
        outputData += System.Environment.NewLine;
        outputData += "namespace " + TargetNamespace + System.Environment.NewLine;
        outputData += "{" + System.Environment.NewLine;
        outputData += "    /// <summary>" + System.Environment.NewLine;
        outputData += "    /// Gets the git branch information." + System.Environment.NewLine;
        outputData += "    /// </summary>" + System.Environment.NewLine;
        outputData += "    internal static class Git" + System.Environment.NewLine;
        outputData += "    {" + System.Environment.NewLine;
        outputData += "        private static string headdesc = \"" + git_out1 + "\";" + System.Environment.NewLine;
        outputData += "        /// <summary>" + System.Environment.NewLine;
        outputData += "        /// The git commit hash as formated by git rev-parse." + System.Environment.NewLine;
        outputData += "        /// </summary>" + System.Environment.NewLine;
        outputData += "        internal static string commit = \"" + git_out2 + "\";" + System.Environment.NewLine;
        outputData += "        /// <summary>" + System.Environment.NewLine;
        outputData += "        /// The git branch name as formated by git name-rev." + System.Environment.NewLine;
        outputData += "        /// </summary>" + System.Environment.NewLine;
        outputData += "        internal static string branchname = \"" + git_out3 + "\";" + System.Environment.NewLine;
        outputData += "        /// <summary>" + System.Environment.NewLine;
        outputData += "        /// Gets if the branch is dirty or clean based upon" + System.Environment.NewLine;
        outputData += "        /// the string constructed by git describe." + System.Environment.NewLine;
        outputData += "        /// </summary>" + System.Environment.NewLine;
        outputData += "        internal static bool IsDirty => headdesc.EndsWith(\"-dirty\");" + System.Environment.NewLine;
        outputData += "        /// <summary>" + System.Environment.NewLine;
        outputData += "        /// Gets if the branch is the master branch or not" + System.Environment.NewLine;
        outputData += "        /// based upon the string constructed by git name-rev." + System.Environment.NewLine;
        outputData += "        /// </summary>" + System.Environment.NewLine;
        outputData += "        internal static bool IsMaster => branchname.Equals(\"master\");" + System.Environment.NewLine;
        outputData += "    }" + System.Environment.NewLine;
        outputData += "}" + System.Environment.NewLine;
        System.IO.StreamWriter fstream = new System.IO.StreamWriter(OutputFile1, false, new System.Text.UTF8Encoding(false));
        fstream.Write(outputData.ToCharArray(), 0, outputData.Length);
        fstream.Dispose();
        Log.LogMessage("Dumping Resources Path for Forms Designer.");
        string resourcespath = SolutionDir + "..{0}Els_kom{0}Resources{0}els_kom.resx";
        resourcespath = resourcespath.Replace("\\\\", "\\");
        resourcespath = string.Format(resourcespath, System.IO.Path.DirectorySeparatorChar);
        string iconpath = SolutionDir + "..{0}Els_kom{0}Resources{0}els_kom.ico";
        iconpath = iconpath.Replace("\\\\", "\\");
        iconpath = string.Format(iconpath, System.IO.Path.DirectorySeparatorChar);
        string outputResourcesData = "// Copyright (c) 2014-2018, Els_kom org." + System.Environment.NewLine;
        outputResourcesData += "// https://github.com/Elskom/" + System.Environment.NewLine;
        outputResourcesData += "// All rights reserved." + System.Environment.NewLine;
        outputResourcesData += "// license: MIT, see LICENSE for more details." + System.Environment.NewLine;
        outputResourcesData += System.Environment.NewLine;
        outputResourcesData += "/* DO NOT MODIFY THIS FILE IT IS AUTOGENERATED BY THE GITBUILDINFO BUILD TASK!!! */" + System.Environment.NewLine;
        outputResourcesData += System.Environment.NewLine;
        outputResourcesData += "namespace " + TargetNamespace + System.Environment.NewLine;
        outputResourcesData += "{" + System.Environment.NewLine;
        outputResourcesData += "    internal static class ResourcesDir" + System.Environment.NewLine;
        outputResourcesData += "    {" + System.Environment.NewLine;
        outputResourcesData += "        /// <summary>" + System.Environment.NewLine;
        outputResourcesData += "        /// Path to the resources file to create/read it." + System.Environment.NewLine;
        outputResourcesData += "        /// </summary>" + System.Environment.NewLine;
        resourcespath = resourcespath.Replace("\\", "\\\\");
        outputResourcesData += "        internal static string resourcespath = \"" + resourcespath + "\";" + System.Environment.NewLine;
        outputResourcesData += "        /// <summary>" + System.Environment.NewLine;
        outputResourcesData += "        /// Path to the Icon file to place in the resources file." + System.Environment.NewLine;
        outputResourcesData += "        /// </summary>" + System.Environment.NewLine;
        iconpath = iconpath.Replace("\\", "\\\\");
        outputResourcesData += "        internal static string iconpath = \"" + iconpath + "\";" + System.Environment.NewLine;
        outputResourcesData += "    }" + System.Environment.NewLine;
        outputResourcesData += "}" + System.Environment.NewLine;
        System.IO.StreamWriter fstream2 = new System.IO.StreamWriter(OutputFile2, false, new System.Text.UTF8Encoding(false));
        fstream2.Write(outputResourcesData.ToCharArray(), 0, outputResourcesData.Length);
        fstream2.Dispose();
]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="FindRCExe" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <SolutionDir Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        // to find only the newest rc.exe available on the system.
        string WindowsKitsDir = System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFiles);
        WindowsKitsDir += System.IO.Path.DirectorySeparatorChar + "Windows Kits";
        System.IO.DirectoryInfo di1 = new System.IO.DirectoryInfo(WindowsKitsDir);
        string rcexepath = string.Empty;
        bool found = false;
        foreach (var di2 in di1.GetDirectories())
        {
          if (found)
          {
            found = false;
          }
          foreach (var di3 in di2.GetDirectories())
          {
            foreach (var di4 in di3.GetDirectories())
            {
              foreach (var fi1 in di4.GetFiles("*.exe"))
              {
                string _exe_file = fi1.Name;
                if (_exe_file.Equals("rc.exe"))
                {
                  rcexepath = WindowsKitsDir + System.IO.Path.DirectorySeparatorChar + di2.Name;
                  rcexepath += System.IO.Path.DirectorySeparatorChar + di3.Name + System.IO.Path.DirectorySeparatorChar;
                  rcexepath += di4.Name + System.IO.Path.DirectorySeparatorChar + _exe_file;
                  found = true;
                }
              }
              if (!found)
              {
                foreach (var di5 in di4.GetDirectories())
                {
                  foreach (var fi1 in di5.GetFiles("*.exe"))
                  {
                    string _exe_file = fi1.Name;
                    if (_exe_file.Equals("rc.exe"))
                    {
                      rcexepath = WindowsKitsDir + System.IO.Path.DirectorySeparatorChar + di2.Name;
                      rcexepath += System.IO.Path.DirectorySeparatorChar + di3.Name + System.IO.Path.DirectorySeparatorChar;
                      rcexepath += di4.Name + System.IO.Path.DirectorySeparatorChar + di5.Name;
                      rcexepath += System.IO.Path.DirectorySeparatorChar + _exe_file;
                      found = true;
                    }
                  }
                }
              }
            }
          }
        }
        Log.LogMessage("Compiling els_kom.rc...");
        System.Diagnostics.Process proc = new System.Diagnostics.Process();
        proc.StartInfo.FileName = rcexepath;
        proc.StartInfo.Arguments = "/nologo /r \"" + SolutionDir + "..\\Els_kom\\Resources\\els_kom.rc\"";
        proc.StartInfo.RedirectStandardOutput = false;
        proc.StartInfo.UseShellExecute = false;
        proc.StartInfo.CreateNoWindow = true;
        try
        {
          proc.Start();
          proc.WaitForExit();
        }
        catch (System.ComponentModel.Win32Exception)
        {
        }
        proc.Dispose();
]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="BeforeBuild">
    <gitbuildinfo OutputFile1="$(ProjectDir)\Classes\Git.cs" TargetNamespace="Els_kom_Core.Classes" SolutionDir="$(SolutionDir)" OutputFile2="$(ProjectDir)\Classes\ResourcesDir.cs" />
  </Target>
  <Target Name="AfterBuild">
    <FindRCExe SolutionDir="$(SolutionDir)" />
  </Target>
</Project>