<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <ProjectGuid>{8588AE1C-CD41-4A96-8C9A-CD48B311BB6E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <RootNamespace>Els_kom_Core</RootNamespace>
    <AssemblyName>Els_kom.Core</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <MyType>Windows</MyType>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <NoWin32Manifest>False</NoWin32Manifest>
    <SignAssembly>true</SignAssembly>
    <DelaySign>false</DelaySign>
    <DefineTrace>false</DefineTrace>
    <ProduceReferenceAssembly>true</ProduceReferenceAssembly>
    <AssemblyOriginatorKeyMode>File</AssemblyOriginatorKeyMode>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <BaseIntermediateOutputPath>..\obj\$(Configuration)\$(ProjectName)</BaseIntermediateOutputPath>
    <IntermediateOutputPath>..\obj\$(Configuration)\$(ProjectName)</IntermediateOutputPath>
    <WarningLevel>4</WarningLevel>
    <NoStdLib>False</NoStdLib>
    <LangVersion>latest</LangVersion>
    <OutputPath>..\bin\$(Configuration)\</OutputPath>
    <DocumentationFile>..\bin\$(Configuration)\Els_kom.Core.xml</DocumentationFile>
    <CodeAnalysisRuleSet>..\Els_kom.ruleset</CodeAnalysisRuleSet>
    <RunCodeAnalysis>false</RunCodeAnalysis>
    <Optimize>false</Optimize>
    <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|AnyCPU'">
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
    <DefineConstants>TRACE;ELS_KOM_CORE_BUILD</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.IO.Compression" />
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Collections.Generic" />
    <Import Include="System.Data" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Linq" />
    <Import Include="System.Xml.Linq" />
    <Import Include="System.Threading.Tasks" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Classes\ExecutionManager.cs" />
    <Compile Include="Classes\Git.cs" />
    <Compile Include="Classes\KOMManager.cs" />
    <Compile Include="Classes\ReleasePackaging.cs" />
    <Compile Include="Classes\ResourcesDir.cs" />
    <Compile Include="Controls\AboutControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Controls\AboutControl.Designer.cs">
      <DependentUpon>AboutControl.cs</DependentUpon>
    </Compile>
    <Compile Include="Controls\MainControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Controls\MainControl.Designer.cs">
      <DependentUpon>MainControl.cs</DependentUpon>
    </Compile>
    <Compile Include="Controls\PluginsControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Controls\PluginsControl.Designer.cs">
      <DependentUpon>PluginsControl.cs</DependentUpon>
    </Compile>
    <Compile Include="Controls\SettingsControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Include="Controls\SettingsControl.Designer.cs">
      <DependentUpon>SettingsControl.cs</DependentUpon>
    </Compile>
    <Compile Include="Enums\SYSCOMMANDS.cs" />
    <Compile Include="GlobalSuppressions.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="..\SharedAssemblyInfo.cs">
      <Link>Properties\SharedAssemblyInfo.cs</Link>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Elskom.PluginFramework">
      <Version>1.0.1</Version>
    </PackageReference>
    <PackageReference Include="NuGet.CommandLine">
      <Version>4.9.2</Version>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="StyleCop.Analyzers" Version="1.1.1-beta.61">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="2.6.2">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeQuality.Analyzers" Version="2.6.2">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="IDisposableAnalyzers" Version="2.0.6">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="XmlAbstraction">
      <Version>1.2.1</Version>
    </PackageReference>
    <PackageReference Include="GenericPluginLoader">
      <Version>1.0.0</Version>
    </PackageReference>
    <PackageReference Include="MessageManager">
      <Version>1.1.1</Version>
    </PackageReference>
    <PackageReference Include="SettingsFile">
      <Version>1.0.2</Version>
    </PackageReference>
    <PackageReference Include="PluginUpdateCheck">
      <Version>1.0.1</Version>
    </PackageReference>
  </ItemGroup>
  <ItemGroup>
    <AdditionalFiles Include="..\stylecop.json">
      <Link>stylecop.json</Link>
    </AdditionalFiles>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <UsingTask TaskName="gitbuildinfo" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFile1 Required="true" />
      <TargetNamespace Required="true" />
      <SolutionDir Required="true" />
      <OutputFile2 Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs"><![CDATA[
        Log.LogMessage(MessageImportance.High, "Getting build info from git");
        string git_out1;
        System.Diagnostics.Process pro1 = new System.Diagnostics.Process();
        pro1.StartInfo.FileName = "git";
        pro1.StartInfo.Arguments = "describe --all --always --dirty";
        pro1.StartInfo.RedirectStandardOutput = true;
        pro1.StartInfo.UseShellExecute = false;
        pro1.StartInfo.CreateNoWindow = true;
        try
        {
          pro1.Start();
          git_out1 = pro1.StandardOutput.ReadToEnd();
          pro1.WaitForExit();
        }
        catch (System.ComponentModel.Win32Exception)
        {
          git_out1 = "Not a git clone or git is not in Path.";
        }
        pro1.Dispose();
        git_out1 = git_out1.Remove(git_out1.Length - 1, 1);
        string git_out2;
        System.Diagnostics.Process pro2 = new System.Diagnostics.Process();
        pro2.StartInfo.FileName = "git";
        pro2.StartInfo.Arguments = "rev-parse --short HEAD";
        pro2.StartInfo.RedirectStandardOutput = true;
        pro2.StartInfo.UseShellExecute = false;
        pro2.StartInfo.CreateNoWindow = true;
        try
        {
          pro2.Start();
          git_out2 = pro2.StandardOutput.ReadToEnd();
          pro2.WaitForExit();
        }
        catch (System.ComponentModel.Win32Exception)
        {
          git_out2 = "Not a git clone or git is not in Path.";
        }
        pro2.Dispose();
        git_out2 = git_out2.Remove(git_out2.Length - 1, 1);
        string git_out3;
        System.Diagnostics.Process pro3 = new System.Diagnostics.Process();
        pro3.StartInfo.FileName = "git";
        pro3.StartInfo.Arguments = "name-rev --name-only HEAD";
        pro3.StartInfo.RedirectStandardOutput = true;
        pro3.StartInfo.UseShellExecute = false;
        pro3.StartInfo.CreateNoWindow = true;
        try
        {
          pro3.Start();
          git_out3 = pro3.StandardOutput.ReadToEnd();
          pro3.WaitForExit();
        }
        catch (System.ComponentModel.Win32Exception)
        {
          git_out3 = "Not a git clone or git is not in Path.";
        }
        pro3.Dispose();
        git_out3 = git_out3.Remove(git_out3.Length - 1, 1);
        string outputData = "// Copyright (c) 2014-2018, Els_kom org." + System.Environment.NewLine;
        outputData += "// https://github.com/Elskom/" + System.Environment.NewLine;
        outputData += "// All rights reserved." + System.Environment.NewLine;
        outputData += "// license: MIT, see LICENSE for more details." + System.Environment.NewLine;
        outputData += System.Environment.NewLine;
        outputData += "/* DO NOT MODIFY THIS FILE IT IS AUTOGENERATED BY THE GITBUILDINFO BUILD TASK!!! */" + System.Environment.NewLine;
        outputData += System.Environment.NewLine;
        outputData += "namespace " + TargetNamespace + System.Environment.NewLine;
        outputData += "{" + System.Environment.NewLine;
        outputData += "    /// <summary>" + System.Environment.NewLine;
        outputData += "    /// Gets the git branch information." + System.Environment.NewLine;
        outputData += "    /// </summary>" + System.Environment.NewLine;
        outputData += "    internal static class Git" + System.Environment.NewLine;
        outputData += "    {" + System.Environment.NewLine;
        outputData += "        private static string headdesc = \"" + git_out1 + "\";" + System.Environment.NewLine + System.Environment.NewLine;
        outputData += "        /// <summary>" + System.Environment.NewLine;
        outputData += "        /// Gets the git commit hash as formated by git rev-parse." + System.Environment.NewLine;
        outputData += "        /// </summary>" + System.Environment.NewLine;
        outputData += "        internal static string Commit => \"" + git_out2 + "\";" + System.Environment.NewLine + System.Environment.NewLine;
        outputData += "        /// <summary>" + System.Environment.NewLine;
        outputData += "        /// Gets the git branch name as formated by git name-rev." + System.Environment.NewLine;
        outputData += "        /// </summary>" + System.Environment.NewLine;
        outputData += "        internal static string Branchname => \"" + git_out3 + "\";" + System.Environment.NewLine + System.Environment.NewLine;
        outputData += "        /// <summary>" + System.Environment.NewLine;
        outputData += "        /// Gets a value indicating whether the branch is dirty or" + System.Environment.NewLine;
        outputData += "        /// clean based upon the string constructed by git describe." + System.Environment.NewLine;
        outputData += "        /// </summary>" + System.Environment.NewLine;
        outputData += "        internal static bool IsDirty => headdesc.EndsWith(\"-dirty\");" + System.Environment.NewLine + System.Environment.NewLine;
        outputData += "        /// <summary>" + System.Environment.NewLine;
        outputData += "        /// Gets a value indicating whether the branch is the master" + System.Environment.NewLine;
        outputData += "        /// branch or not based upon the string constructed by" + System.Environment.NewLine;
        outputData += "        /// git name-rev." + System.Environment.NewLine;
        outputData += "        /// </summary>" + System.Environment.NewLine;
        outputData += "        internal static bool IsMaster => Branchname.Equals(\"master\");" + System.Environment.NewLine;
        outputData += "    }" + System.Environment.NewLine;
        outputData += "}" + System.Environment.NewLine;
        System.IO.StreamWriter fstream = new System.IO.StreamWriter(OutputFile1, false, new System.Text.UTF8Encoding(false));
        fstream.Write(outputData.ToCharArray(), 0, outputData.Length);
        fstream.Dispose();
        Log.LogMessage(MessageImportance.High, "Dumping Resources Path for Forms Designer.");
        string resourcespath = SolutionDir + "..{0}Els_kom{0}Resources{0}els_kom.resx";
        resourcespath = resourcespath.Replace("\\\\", "\\");
        resourcespath = string.Format(resourcespath, System.IO.Path.DirectorySeparatorChar);
        string iconpath = SolutionDir + "..{0}Els_kom{0}Resources{0}els_kom.ico";
        iconpath = iconpath.Replace("\\\\", "\\");
        iconpath = string.Format(iconpath, System.IO.Path.DirectorySeparatorChar);
        string outputResourcesData = "// Copyright (c) 2014-2018, Els_kom org." + System.Environment.NewLine;
        outputResourcesData += "// https://github.com/Elskom/" + System.Environment.NewLine;
        outputResourcesData += "// All rights reserved." + System.Environment.NewLine;
        outputResourcesData += "// license: MIT, see LICENSE for more details." + System.Environment.NewLine;
        outputResourcesData += System.Environment.NewLine;
        outputResourcesData += "/* DO NOT MODIFY THIS FILE IT IS AUTOGENERATED BY THE GITBUILDINFO BUILD TASK!!! */" + System.Environment.NewLine;
        outputResourcesData += System.Environment.NewLine;
        outputResourcesData += "namespace " + TargetNamespace + System.Environment.NewLine;
        outputResourcesData += "{" + System.Environment.NewLine;
        outputResourcesData += "    /// <summary>" + System.Environment.NewLine;
        outputResourcesData += "    /// Resources stuff." + System.Environment.NewLine;
        outputResourcesData += "    /// </summary>" + System.Environment.NewLine;
        outputResourcesData += "    internal static class ResourcesDir" + System.Environment.NewLine;
        outputResourcesData += "    {" + System.Environment.NewLine;
        outputResourcesData += "        /// <summary>" + System.Environment.NewLine;
        outputResourcesData += "        /// Gets the path to the resources file to create/read it." + System.Environment.NewLine;
        outputResourcesData += "        /// </summary>" + System.Environment.NewLine;
        resourcespath = resourcespath.Replace("\\", "\\\\");
        outputResourcesData += "        internal static string Resourcespath => \"" + resourcespath + "\";" + System.Environment.NewLine + System.Environment.NewLine;
        outputResourcesData += "        /// <summary>" + System.Environment.NewLine;
        outputResourcesData += "        /// Gets the path to the Icon file to place in the resources file." + System.Environment.NewLine;
        outputResourcesData += "        /// </summary>" + System.Environment.NewLine;
        iconpath = iconpath.Replace("\\", "\\\\");
        outputResourcesData += "        internal static string Iconpath => \"" + iconpath + "\";" + System.Environment.NewLine;
        outputResourcesData += "    }" + System.Environment.NewLine;
        outputResourcesData += "}" + System.Environment.NewLine;
        System.IO.StreamWriter fstream2 = new System.IO.StreamWriter(OutputFile2, false, new System.Text.UTF8Encoding(false));
        fstream2.Write(outputResourcesData.ToCharArray(), 0, outputResourcesData.Length);
        fstream2.Dispose();
]]></Code>
    </Task>
  </UsingTask>
  <Target Name="BeforeBuild">
    <gitbuildinfo OutputFile1="$(ProjectDir)\Classes\Git.cs" TargetNamespace="Els_kom_Core.Classes" SolutionDir="$(SolutionDir)" OutputFile2="$(ProjectDir)\Classes\ResourcesDir.cs" />
  </Target>
  <!--
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>