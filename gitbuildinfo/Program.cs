// Copyright (c) 2014-2018, Els_kom org.
// https://github.com/Elskom/
// All rights reserved.
// license: MIT, see LICENSE for more details.

namespace gitbuildinfo
{
    internal class Program
    {
        private static string RunGit(string Arguments)
        {
            string ret;
            System.Diagnostics.Process proc = new System.Diagnostics.Process();
            proc.StartInfo.FileName = "git";
            proc.StartInfo.Arguments = Arguments;
            proc.StartInfo.RedirectStandardOutput = true;
            proc.StartInfo.UseShellExecute = false;
            proc.StartInfo.CreateNoWindow = true;
            try
            {
                proc.Start();
                ret = proc.StandardOutput.ReadToEnd();
                proc.WaitForExit();
            }
            catch (System.ComponentModel.Win32Exception)
            {
                ret = "Not a git clone or git is not in Path.";
            }
            proc.Dispose();
            return ret;
        }

        private static string FixupDumpedDir(string source)
        {
            return source.Replace("\\", "\\\\");
        }

        private static string MakePathString(string pathfmt)
        {
            // avoid issues with FixupDumpedDir().
            pathfmt = pathfmt.Replace("\\\\", "\\");
            return string.Format(pathfmt, System.IO.Path.DirectorySeparatorChar);
        }

        private static void Main(string[] args)
        {
            if ((args.Length - 1) > -1)
            {
                System.Console.WriteLine("Getting build info from git");
                string git_out1 = RunGit("describe --all --always --dirty");
                git_out1 = git_out1.Remove(git_out1.Length - 1, 1);
                string git_out2 = RunGit("rev-parse --short HEAD");
                git_out2 = git_out2.Remove(git_out2.Length - 1, 1);
                string git_out3 = RunGit("name-rev --name-only HEAD");
                git_out3 = git_out3.Remove(git_out3.Length - 1, 1);
                string outputData = "// Copyright (c) 2014-2018, Els_kom org." + System.Environment.NewLine;
                outputData += "// https://github.com/Elskom/" + System.Environment.NewLine;
                outputData += "// All rights reserved." + System.Environment.NewLine;
                outputData += "// license: MIT, see LICENSE for more details." + System.Environment.NewLine;
                outputData += System.Environment.NewLine;
                outputData += "/* DO NOT MODIFY THIS FILE IT IS AUTOGENERATED BY gitbuildinfo.exe!!! */" + System.Environment.NewLine;
                outputData += System.Environment.NewLine;
                outputData += "namespace " + args[1] + System.Environment.NewLine;
                outputData += "{" + System.Environment.NewLine;
                outputData += "    /// <summary>" + System.Environment.NewLine;
                outputData += "    /// Gets the git branch information." + System.Environment.NewLine;
                outputData += "    /// </summary>" + System.Environment.NewLine;
                outputData += "    internal static class Git" + System.Environment.NewLine;
                outputData += "    {\n" + System.Environment.NewLine;
                outputData += "        private static string headdesc = \"" + git_out1 + "\";" + System.Environment.NewLine;
                outputData += "        /// <summary>" + System.Environment.NewLine;
                outputData += "        /// The git commit hash as formated by git rev-parse." + System.Environment.NewLine;
                outputData += "        /// </summary>" + System.Environment.NewLine;
                outputData += "        internal static string commit = \"" + git_out2 + "\";" + System.Environment.NewLine;
                outputData += "        /// <summary>" + System.Environment.NewLine;
                outputData += "        /// The git branch name as formated by git name-rev." + System.Environment.NewLine;
                outputData += "        /// </summary>" + System.Environment.NewLine;
                outputData += "        internal static string branchname = \"" + git_out3 + "\";" + System.Environment.NewLine;
                outputData += "        /// <summary>" + System.Environment.NewLine;
                outputData += "        /// Gets if the branch is dirty or clean based upon" + System.Environment.NewLine;
                outputData += "        /// the string constructed by git describe." + System.Environment.NewLine;
                outputData += "        /// </summary>" + System.Environment.NewLine;
                outputData += "        internal static bool IsDirty => headdesc.EndsWith(\"-dirty\");" + System.Environment.NewLine;
                outputData += "        /// <summary>" + System.Environment.NewLine;
                outputData += "        /// Gets if the branch is the master branch or not" + System.Environment.NewLine;
                outputData += "        /// based upon the string constructed by git name-rev." + System.Environment.NewLine;
                outputData += "        /// </summary>" + System.Environment.NewLine;
                outputData += "        internal static bool IsMaster => branchname.Equals(\"master\");" + System.Environment.NewLine;
                outputData += "    }" + System.Environment.NewLine;
                outputData += "}" + System.Environment.NewLine;
                System.IO.StreamWriter fstream = new System.IO.StreamWriter(args[0], false, new System.Text.UTF8Encoding(false));
                fstream.Write(outputData.ToCharArray(), 0, outputData.Length);
                fstream.Dispose();
                if (args[2] == "--r")
                {
                    System.Console.WriteLine("Dumping Resources Path for Forms Designer.");
                    string resourcespath = MakePathString(args[3] + "..{0}Els_kom{0}Resources{0}els_kom.resx");
                    string iconpath = MakePathString(args[3] + "..{0}Els_kom{0}Resources{0}els_kom.ico");
                    string outputResourcesData = "// Copyright (c) 2014-2018, Els_kom org." + System.Environment.NewLine;
                    outputResourcesData += "// https://github.com/Elskom/" + System.Environment.NewLine;
                    outputResourcesData += "// All rights reserved." + System.Environment.NewLine;
                    outputResourcesData += "// license: MIT, see LICENSE for more details." + System.Environment.NewLine;
                    outputResourcesData += System.Environment.NewLine;
                    outputResourcesData += "/* DO NOT MODIFY THIS FILE IT IS AUTOGENERATED BY gitbuildinfo.exe!!! */" + System.Environment.NewLine;
                    outputResourcesData += System.Environment.NewLine;
                    outputResourcesData += "namespace " + args[1] + System.Environment.NewLine;
                    outputResourcesData += "{" + System.Environment.NewLine;
                    outputResourcesData += "    internal static class ResourcesDir" + System.Environment.NewLine;
                    outputResourcesData += "    {" + System.Environment.NewLine;
                    outputResourcesData += "        /// <summary>" + System.Environment.NewLine;
                    outputResourcesData += "        /// Path to the resources file to create/read it." + System.Environment.NewLine;
                    outputResourcesData += "        /// </summary>" + System.Environment.NewLine;
                    outputResourcesData += "        internal static string resourcespath = \"" + FixupDumpedDir(resourcespath) + "\";" + System.Environment.NewLine;
                    outputResourcesData += "        /// <summary>" + System.Environment.NewLine;
                    outputResourcesData += "        /// Path to the Icon file to place in the resources file." + System.Environment.NewLine;
                    outputResourcesData += "        /// </summary>" + System.Environment.NewLine;
                    outputResourcesData += "        internal static string iconpath = \"" + FixupDumpedDir(iconpath) + "\";" + System.Environment.NewLine;
                    outputResourcesData += "    }" + System.Environment.NewLine;
                    outputResourcesData += "}" + System.Environment.NewLine;
                    System.IO.StreamWriter fstream2 = new System.IO.StreamWriter(args[4], false, new System.Text.UTF8Encoding(false));
                    fstream2.Write(outputResourcesData.ToCharArray(), 0, outputResourcesData.Length);
                    fstream2.Dispose();
                }
            }
            else
            {
                System.Console.WriteLine("Usage:");
                System.Console.WriteLine("\tgitbuildinfo [--r] <output file> <output namespace>");
            }
        }
    }
}
