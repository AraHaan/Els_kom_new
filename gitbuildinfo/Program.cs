// Copyright (c) 2014-2018, Els_kom org.
// https://github.com/Elskom/
// All rights reserved.
// license: MIT, see LICENSE for more details.

namespace gitbuildinfo
{
    internal class Program
    {
        private static string RunGit(string Arguments)
        {
            string ret;
            System.Diagnostics.Process proc = new System.Diagnostics.Process();
            proc.StartInfo.FileName = "git";
            proc.StartInfo.Arguments = Arguments;
            proc.StartInfo.RedirectStandardOutput = true;
            proc.StartInfo.UseShellExecute = false;
            proc.StartInfo.CreateNoWindow = true;
            try
            {
                proc.Start();
                ret = proc.StandardOutput.ReadToEnd();
                proc.WaitForExit();
            }
            catch (System.ComponentModel.Win32Exception)
            {
                ret = "Not a git clone or git is not in Path.";
            }
            proc.Dispose();
            return ret;
        }

        private static string FixupDumpedDir(string source)
        {
            return source.Replace("\\", "\\\\");
        }

        private static void Main(string[] args)
        {
            if ((args.Length - 1) > -1)
            {
                System.Console.WriteLine("Getting build info from git");
                string outputData = "// Copyright (c) 2014-2018, Els_kom org.\n";
                outputData += "// https://github.com/Elskom/\n";
                outputData += "// All rights reserved.\n";
                outputData += "// license: MIT, see LICENSE for more details.\n";
                outputData += "\n";
                outputData += "/* DO NOT MODIFY THIS FILE IT IS AUTOGENERATED BY gitbuildinfo.exe!!! */\n";
                outputData += "\n";
                outputData += "namespace ";
                outputData += args[1];
                outputData += "\n";
                outputData += "{\n";
                outputData += "    /// <summary>\n";
                outputData += "    /// Gets the git branch information.\n";
                outputData += "    /// </summary>\n";
                outputData += "    internal static class Git\n";
                outputData += "    {\n";
                outputData += "        private static string headdesc = \"";
                string git_out1 = RunGit("describe --all --always --dirty");
                git_out1 = git_out1.Remove(git_out1.Length - 1, 1);
                outputData += git_out1;
                outputData += "\";\n";
                outputData += "        /// <summary>\n";
                outputData += "        /// The git commit hash as formated by git rev-parse.\n";
                outputData += "        /// </summary>\n";
                outputData += "        internal static string commit = \"";
                string git_out2 = RunGit("rev-parse --short HEAD");
                git_out2 = git_out2.Remove(git_out2.Length - 1, 1);
                outputData += git_out2;
                outputData += "\";\n";
                outputData += "        /// <summary>\n";
                outputData += "        /// The git branch name as formated by git name-rev.\n";
                outputData += "        /// </summary>\n";
                outputData += "        internal static string branchname = \"";
                string git_out3 = RunGit("name-rev --name-only HEAD");
                git_out3 = git_out3.Remove(git_out3.Length - 1, 1);
                outputData += git_out3;
                outputData += "\";\n";
                outputData += "        /// <summary>\n";
                outputData += "        /// Gets if the branch is dirty or clean based upon\n";
                outputData += "        /// the string constructed by git describe.\n";
                outputData += "        /// </summary>\n";
                outputData += "        internal static bool IsDirty => headdesc.EndsWith(\"-dirty\");\n";
                outputData += "        /// <summary>\n";
                outputData += "        /// Gets if the branch is the master branch or not\n";
                outputData += "        /// based upon the string constructed by git name-rev.\n";
                outputData += "        /// </summary>\n";
                outputData += "        internal static bool IsMaster => branchname.Equals(\"master\");\n";
                outputData += "    }\n";
                outputData += "}\n";
                System.IO.StreamWriter fstream = new System.IO.StreamWriter(args[0], false, new System.Text.UTF8Encoding(false));
                fstream.Write(outputData.ToCharArray(), 0, outputData.Length);
                fstream.Dispose();
                // write build output path for building the Els_kom Core for showing the forms
                // with the icon in the Windows Forms Designer.
                if (args[2] == "--b")
                {
                    System.Console.WriteLine("Dumping Build Output Path for Forms Designer.");
                    string outputBuildData = "// Copyright (c) 2014-2018, Els_kom org.\n";
                    outputBuildData += "// https://github.com/Elskom/\n";
                    outputBuildData += "// All rights reserved.\n";
                    outputBuildData += "// license: MIT, see LICENSE for more details.\n";
                    outputBuildData += "\n";
                    outputBuildData += "/* DO NOT MODIFY THIS FILE IT IS AUTOGENERATED BY gitbuildinfo.exe!!! */\n";
                    outputBuildData += "\n";
                    outputBuildData += "namespace ";
                    outputBuildData += args[1];
                    outputBuildData += "\n";
                    outputBuildData += "{\n";
                    outputBuildData += "    /// <summary>\n";
                    outputBuildData += "    /// The Els_kom Build folder.\n";
                    outputBuildData += "    /// This class is meant for the Windows Forms Designer.\n";
                    outputBuildData += "    /// </summary>\n";
                    outputBuildData += "    internal static class BuildDir\n";
                    outputBuildData += "    {\n";
                    outputBuildData += "        /// <summary>\n";
                    outputBuildData += "        /// The folder that the Els_kom Core will output to.\n";
                    outputBuildData += "        /// </summary>\n";
                    outputBuildData += "        internal static string buildfolder = \"";
                    outputBuildData += FixupDumpedDir(args[3]);
                    outputBuildData += "\";\n";
                    outputBuildData += "    }\n";
                    outputBuildData += "}\n";
                    System.IO.StreamWriter fstream2 = new System.IO.StreamWriter(args[4], false, new System.Text.UTF8Encoding(false));
                    fstream2.Write(outputBuildData.ToCharArray(), 0, outputBuildData.Length);
                    fstream2.Dispose();
                }
            }
            else
            {
                System.Console.WriteLine("Usage:");
                System.Console.WriteLine("\tgitbuildinfo <output file> <output namespace>");
            }
        }
    }
}
